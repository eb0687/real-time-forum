// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package database

import (
	"context"
	"database/sql"
	"fmt"
	"real-time-forum/models"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

type Queries struct {
	db DBTX
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db: tx,
	}
}

// ---

var Database *sql.DB

func Init() error {
	d, err := sql.Open("sqlite3", models.DB_NAME)
	if err != nil {
		return err
	}
	Database = d

	if err := Database.Ping(); err != nil {
		return fmt.Errorf("failed to connect to database: %v", err)
	}
	return nil
}

func CloseDB() {
	err := Database.Close()
	if err != nil {
		fmt.Printf("error closing the DB: %v\n", err)
		return
	}
}
