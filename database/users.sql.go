// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package database

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
 nickname,
 age,
 gender,
 first_name,
 last_name,
 email,
 password)
VALUES (?, ?, ?, ?, ?, ?, ?)
RETURNING id
`

type CreateUserParams struct {
	Nickname  string         `json:"nickname"`
	Age       int64          `json:"age"`
	Gender    sql.NullString `json:"gender"`
	FirstName string         `json:"first_name"`
	LastName  string         `json:"last_name"`
	Email     string         `json:"email"`
	Password  string         `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Nickname,
		arg.Age,
		arg.Gender,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Password,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const readUser = `-- name: ReadUser :one
SELECT id, nickname, age, gender, first_name, last_name, email, password
FROM users
WHERE id = ?
`

func (q *Queries) ReadUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, readUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Nickname,
		&i.Age,
		&i.Gender,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET nickname = ?,
    age = ?,
    gender = ?,
    first_name = ?,
    last_name = ?,
    email = ?,
    password = ?
WHERE id = ?
`

type UpdateUserParams struct {
	Nickname  string         `json:"nickname"`
	Age       int64          `json:"age"`
	Gender    sql.NullString `json:"gender"`
	FirstName string         `json:"first_name"`
	LastName  string         `json:"last_name"`
	Email     string         `json:"email"`
	Password  string         `json:"password"`
	ID        int64          `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.Nickname,
		arg.Age,
		arg.Gender,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Password,
		arg.ID,
	)
	return err
}
